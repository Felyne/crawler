// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pb/itemsaver.proto

package pb

import (
	"fmt"
	"math"

	"github.com/golang/protobuf/proto"
)

import (
	"context"

	"github.com/micro/go-micro/client"
	"github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ItemSaver service

type ItemSaverService interface {
	Save(ctx context.Context, in *Item, opts ...client.CallOption) (*Resp, error)
}

type itemSaverService struct {
	c    client.Client
	name string
}

func NewItemSaverService(name string, c client.Client) ItemSaverService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "pb"
	}
	return &itemSaverService{
		c:    c,
		name: name,
	}
}

func (c *itemSaverService) Save(ctx context.Context, in *Item, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "ItemSaver.Save", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ItemSaver service

type ItemSaverHandler interface {
	Save(context.Context, *Item, *Resp) error
}

func RegisterItemSaverHandler(s server.Server, hdlr ItemSaverHandler, opts ...server.HandlerOption) error {
	type itemSaver interface {
		Save(ctx context.Context, in *Item, out *Resp) error
	}
	type ItemSaver struct {
		itemSaver
	}
	h := &itemSaverHandler{hdlr}
	return s.Handle(s.NewHandler(&ItemSaver{h}, opts...))
}

type itemSaverHandler struct {
	ItemSaverHandler
}

func (h *itemSaverHandler) Save(ctx context.Context, in *Item, out *Resp) error {
	return h.ItemSaverHandler.Save(ctx, in, out)
}
